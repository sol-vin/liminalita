[gd_resource type="ShaderMaterial" load_steps=2 format=3 uid="uid://bfba50ym2thof"]

[sub_resource type="Shader" id="Shader_7iow2"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode unshaded, ambient_light_disabled, fog_disabled;

vec4 hsv_to_rgb(float h, float s, float v, float a){
	//based on
	//https://stackoverflow.com/questions/51203917/math-behind-hsv-to-rgb-conversion-of-colors
    // So it needs values from 0 to 1
	float r;
	float g;
	float b;

	float i = floor(h*6.0);
	float f = h*6.0 -i;
	float p = v*(1.0-s);
	float q = v*(1.0-f*s);
	float t = v* (1.0-(1.0-f)*s);

	int cond = int(i)%6;

	if (cond == 0){
		r = v; g = t; b = p;
	}
	else if (cond == 1){
		r = q; g = v; b = p;
	}
	else if (cond == 2){
		r = p; g = v; b = t;
	}
	else if (cond == 3){
		r = p; g = q; b = v;
	}
	else if (cond == 4){
		r = t; g = p; b = v;
	}
	else if (cond == 5){
		r = v; g = p; b = q;
	}
	else {
		// THIS SHOULD NEVER HAPPEN
		r = 0.0; g = 0.0; b = 0.0;
	}
	return vec4(r,g,b,a);



	return vec4(0.5,1.0,0.0,1.0);
}

vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) + 0.5;
}


uniform vec3 base : source_color = vec3(0.2, 0.5, 0.9);
uniform vec3 highlight1 : source_color = vec3(0.9, 0.5, 0.2);
uniform vec3 highlight2 : source_color = vec3(0.6, 1.0, 0.3);
uniform float noise_scale = 10.0;
uniform float roughness = 0.5;
uniform float shift_intensity = 1.0;

void vertex() {
	float sin_time = sin(TIME);
	vec2 noise_uv = VERTEX.xz + vec2(TIME, VERTEX.z + sin_time) * 0.25;
	float noise_value_x = noise(noise_uv) - 0.5;
	float noise_value_y = noise(noise_uv + vec2(TIME) * 0.1) - 0.5;
	float noise_value_z =  noise(noise_uv + vec2(-TIME) * 0.1) - 0.5;
	vec3 noise_value = vec3(noise_value_x, noise_value_y, noise_value_z);
	VERTEX = VERTEX + noise_value;
}

void fragment() {
	//float sin_time = sin(TIME);
	//vec2 noise_uv = UV * (sin_time-0.5) * 0.01 + vec2(TIME, TIME) * 0.01;
	//float noise_value_x = noise(noise_uv) - 0.5;
	//float noise_value_y = noise(noise_uv + vec2(TIME) * 0.01) - 0.5;
	//float noise_value_z =  noise(noise_uv + vec2(-TIME) * 0.01) - 0.5;
	//vec3 noise_value = vec3(noise_value_x, noise_value_y, noise_value_z);
//
	//vec3 color = hsv_to_rgb(noise_value.x, 1.0, 1.0, 1.0).rgb;
	////EMISSION = color;
	//ALBEDO = color;

	//Direction out of mesh along view angle
	vec3 V = normalize(-VIEW);
	//Quick convenient fresnel simulation
	float _fresnel = pow(1.0 - dot(NORMAL, V), 2.0);

	vec3 world_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;
	float noise_value = noise(UV * noise_scale);

	float turbulence = abs(noise_value - 0.5) * 2.0;

	ALBEDO = mix(base, highlight1, noise_value);
	ALBEDO = mix(ALBEDO, highlight2, turbulence);

	float angle_factor = abs(dot(V, NORMAL));

	//Assumed to be mixing from black here
	ALBEDO = mix(ALBEDO, vec3(1.0), angle_factor * shift_intensity);

	//fade out according to roughness
	ALBEDO = mix(ALBEDO, vec3(1.0), _fresnel * roughness);

	//EMISSION = vec3(1.0);
	SPECULAR = 1.0-roughness;
}
"

[resource]
render_priority = 0
shader = SubResource("Shader_7iow2")
shader_parameter/base = Color(0.775833, 0, 0.95, 1)
shader_parameter/highlight1 = Color(0.933333, 0, 1, 1)
shader_parameter/highlight2 = Color(1.49205e-06, 0.625948, 0.453309, 1)
shader_parameter/noise_scale = 10.08
shader_parameter/roughness = 0.14
shader_parameter/shift_intensity = -7.16
